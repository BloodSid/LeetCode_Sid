package leetcode.editor.cn;
//给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图 graph 表示。在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够
//直接连接到另一个节点 j。 
//
// 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传
//播将继续，直到没有更多的节点可以被这种方式感染。 
//
// 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。 
//
// 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。 
//
// 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染。 
//
// 
//
// 
// 
//
// 示例 1： 
//
// 
//输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
//输出：0
// 
//
// 示例 2： 
//
// 
//输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
//输出：0
// 
//
// 示例 3： 
//
// 
//输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
//输出：1
// 
//
// 
//
// 提示： 
// 
//
// 
// n == graph.length 
// n == graph[i].length 
// 2 <= n <= 300 
// graph[i][j] == 0 或 1. 
// graph[i][j] == graph[j][i] 
// graph[i][i] == 1 
// 1 <= initial.length <= n 
// 0 <= initial[i] <= n - 1 
// initial 中所有整数均不重复 
// 
// 👍 79 👎 0


import java.util.Arrays;

/**
 * 尽量减少恶意软件的传播
 *
 * @author IronSid
 * @version 1.0
 * @since 2022-08-18 00:36:10 
 */
public class MinimizeMalwareSpreadSolution {
static
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {

    private int[] p;
    private int[] sz;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        p = new int[n];
        sz = new int[n];
        for (int i = 0; i < n; i++) p[i] = i;
        Arrays.fill(sz, 1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        // 在根节点记录每个并查集上initial的
        int[] cnt = new int[n];
        for (int i : initial) {
            cnt[find(i)]++;
        }
        int max = -1;
        int res = 0;
        for (int init : initial) {
            int diff = 0;
            // 找到只有一个 initial 节点的，最大的并查集
            if (cnt[find(init)] == 1) {
                diff = sz[find(init)];
            } else {
                // 如果不止有一个 initial 节点，减少值为0
                diff = 0;
            }
            if (diff > max) {
                max = diff;
                res = init;
            } else if (diff == max) {
                res = Math.min(res, init);
            }
        }
        return res;
    }

    int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

    void union(int x, int y) {
        int rx = find(x);
        int ry = find(y);
        if (rx == ry) return;
        if (sz[rx] > sz[ry]) {
            p[ry] = rx;
            sz[rx] += sz[ry];
        } else {
            p[rx] = ry;
            sz[ry] += sz[rx];
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
